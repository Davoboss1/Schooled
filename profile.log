FUNCTION  coc#client#get_channel()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim line 127
Called 239 times
Total time:   0.015368
 Self time:   0.015368

count  total (s)   self (s)
  239              0.003939   if s:is_vim
                                return a:client['channel']
  239              0.001505   endif
  239              0.003977   return a:client['chan_id']

FUNCTION  ctrlp#utils#writecache()
    Defined: ~/.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim line 63
Called 1 time
Total time:   0.001930
 Self time:   0.001794

count  total (s)   self (s)
    1   0.000237   0.000101 	if isdirectory(ctrlp#utils#mkdir(a:0 ? a:1 : s:cache_dir))
    1              0.001652 		sil! cal writefile(a:lines, a:0 >= 2 ? a:2 : ctrlp#utils#cachefile())
    1              0.000024 	en

FUNCTION  <SNR>51_addtomrufs()
    Defined: ~/.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim line 70
Called 1 time
Total time:   0.004845
 Self time:   0.004845

count  total (s)   self (s)
    1              0.001924 	let fn = fnamemodify(a:fname, get(g:, 'ctrlp_tilde_homedir', 0) ? ':p:~' : ':p')
    1              0.000095 	let fn = exists('+ssl') ? tr(fn, '/', '\') : fn
    1              0.000142 	let abs_fn = fnamemodify(fn,':p')
    1              0.000610 	if ( !empty({s:in}) && fn !~# {s:in} ) || ( !empty({s:ex}) && fn =~# {s:ex} ) || !empty(getbufvar('^' . abs_fn . '$', '&bt')) || !filereadable(abs_fn)
                            		retu
    1              0.000010 	en
    1              0.001852 	let idx = index(s:mrufs, fn, 0, !{s:cseno})
    1              0.000030 	if idx
                            		cal filter(s:mrufs, 'v:val !='.( {s:cseno} ? '#' : '?' ).' fn')
                            		cal insert(s:mrufs, fn)
                            		if {s:soup} && idx < 0
                            			cal s:savetofile(s:mergelists())
                            		en
    1              0.000006 	en

FUNCTION  coc#util#cursor()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim line 90
Called 85 times
Total time:   0.009749
 Self time:   0.009749

count  total (s)   self (s)
   85              0.003197   let pos = getcurpos()
   85              0.002849   let content = pos[2] == 1 ? '' : getline('.')[0: pos[2] - 2]
   85              0.002445   return [pos[1] - 1, strchars(content)]

FUNCTION  coc#rpc#request()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim line 88
Called 3 times
Total time:   0.094853
 Self time:   0.000679

count  total (s)   self (s)
    3   0.000467   0.000217   if !coc#rpc#ready()
                                return ''
    3              0.000021   endif
    3   0.094291   0.000367   return s:client['request'](a:method, a:args)

FUNCTION  ctrlp#utils#readfile()
    Defined: ~/.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim line 44
Called 1 time
Total time:   0.000884
 Self time:   0.000884

count  total (s)   self (s)
    1              0.000111 	if filereadable(a:file)
    1              0.000657 		let data = readfile(a:file)
    1              0.000052 		if empty(data) || type(data) != 3
                            			unl data
                            			let data = []
    1              0.000008 		en
    1              0.000012 		retu data
                            	en
                            	retu []

FUNCTION  ctrlp#mrufiles#cachefile()
    Defined: ~/.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim line 137
Called 1 time
Total time:   0.000117
 Self time:   0.000117

count  total (s)   self (s)
    1              0.000048 	if !exists('s:cadir') || !exists('s:cafile')
                            		let s:cadir = ctrlp#utils#cachedir().ctrlp#utils#lash().'mru'
                            		let s:cafile = s:cadir.ctrlp#utils#lash().'cache.txt'
    1              0.000008 	en
    1              0.000013 	retu s:cafile

FUNCTION  ale#events#QuitEvent()
    Defined: ~/.vim/plugged/ale/autoload/ale/events.vim line 14
Called 1 time
Total time:   0.000208
 Self time:   0.000141

count  total (s)   self (s)
                                " Remember when ALE is quitting for BufWrite, etc.
    1   0.000189   0.000121     call setbufvar(a:buffer, 'ale_quitting', ale#events#ClockMilliseconds())

FUNCTION  ale#events#ClockMilliseconds()
    Defined: ~/.vim/plugged/ale/autoload/ale/events.vim line 10
Called 1 time
Total time:   0.000068
 Self time:   0.000068

count  total (s)   self (s)
    1              0.000059     return float2nr(reltimefloat(reltime()) * 1000)

FUNCTION  <SNR>55_request()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim line 134
Called 3 times
Total time:   0.093924
 Self time:   0.093496

count  total (s)   self (s)
    3   0.000464   0.000267   let channel = coc#client#get_channel(self)
    3              0.000088   if empty(channel) | return '' | endif
    3              0.000022   try
    3              0.000026     if s:is_vim
                                  let res = ch_evalexpr(channel, [a:method, a:args], {'timeout': 60 * 1000})
                                  if type(res) == 1 && res ==# ''
                                    throw 'request '.a:method. ' '.string(a:args).' timeout after 60s'
                                  endif
                                  let [l:errmsg, res] =  res
                                  if !empty(l:errmsg)
                                    throw l:errmsg
                                  else
                                    return res
                                  endif
    3              0.000016     else
    3   0.092075   0.091843       return call('rpcrequest', [channel, a:method] + a:args)
                                endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0) | return | endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on request ('.a:method.'): '.v:exception | echohl None
                                endif
    3              0.000032   endtry

FUNCTION  <SNR>51_chop()
    Defined: ~/.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim line 38
Called 1 time
Total time:   0.000106
 Self time:   0.000106

count  total (s)   self (s)
    1              0.000078 	if len(a:mrufs) > {s:max} | cal remove(a:mrufs, {s:max}, -1) | en
    1              0.000012 	retu a:mrufs

FUNCTION  ctrlp#utils#mkdir()
    Defined: ~/.vim/plugged/ctrlp.vim/autoload/ctrlp/utils.vim line 56
Called 1 time
Total time:   0.000136
 Self time:   0.000136

count  total (s)   self (s)
    1              0.000080 	if exists('*mkdir') && !isdirectory(a:dir)
                            		sil! cal mkdir(a:dir, 'p')
    1              0.000008 	en
    1              0.000012 	retu a:dir

FUNCTION  <SNR>52_SyncAutocmd()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim line 211
Called 3 times
Total time:   0.095589
 Self time:   0.000736

count  total (s)   self (s)
    3              0.000144   if !get(g:,'coc_workspace_initialized', 0)
                                return
    3              0.000024   endif
    3              0.000075   if get(g:, 'coc_service_initialized', 0)
    3   0.095148   0.000295     call coc#rpc#request('CocAutocmd', a:000)
                              else
                                call coc#rpc#notify('CocAutocmd', a:000)
    3              0.000020   endif

FUNCTION  coc#rpc#ready()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim line 31
Called 239 times
Total time:   0.019263
 Self time:   0.019263

count  total (s)   self (s)
  239              0.009545   if empty(s:client) || s:client['running'] == 0
                                return 0
  239              0.001585   endif
  239              0.001960   return 1

FUNCTION  <SNR>71_Highlight_Matching_Pair()
    Defined: /data/data/com.termux/files/usr/share/nvim/runtime/plugin/matchparen.vim line 39
Called 235 times
Total time:   0.199102
 Self time:   0.199102

count  total (s)   self (s)
                              " Remove any previous match.
  235              0.008347   if exists('w:paren_hl_on') && w:paren_hl_on
    3              0.000091     silent! call matchdelete(3)
    3              0.000067     let w:paren_hl_on = 0
  235              0.001613   endif
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  235              0.009409   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
  235              0.001507   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  235              0.006327   let c_lnum = line('.')
  235              0.005040   let c_col = col('.')
  235              0.002956   let before = 0
                            
  235              0.005781   let text = getline(c_lnum)
  235              0.028134   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
  235              0.006080   if empty(matches)
                                let [c_before, c] = ['', '']
  235              0.001726   else
  235              0.007746     let [c_before, c] = matches[1:2]
  235              0.001925   endif
  235              0.029434   let plist = split(&matchpairs, '.\zs[:,]')
  235              0.007728   let i = index(plist, c)
  235              0.003288   if i < 0
                                " not found, in Insert mode try character before the cursor
  231              0.004834     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
  231              0.001545     endif
  231              0.002337     if i < 0
                                  " not found, nothing to do
  231              0.001907       return
                                endif
    4              0.000022   endif
                            
                              " Figure out the arguments for searchpairpos().
    4              0.000068   if i % 2 == 0
    4              0.000063     let s_flags = 'nW'
    4              0.000097     let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
    4              0.000024   endif
    4              0.000055   if c == '['
                                let c = '\['
                                let c2 = '\]'
    4              0.000022   endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
    4              0.000041   if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
    4              0.000027   endif
                            
    4              0.000163   if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
    4              0.000024   else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial.
    4              0.000184     let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|comment"''))'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
    4              0.000038     try
    4              0.004559       execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
    4              0.000034     endtry
    4              0.000023   endif
                            
                              " Limit the search to lines visible in the window.
    4              0.000380   let stoplinebottom = line('w$')
    4              0.000122   let stoplinetop = line('w0')
    4              0.000079   if i % 2 == 0
    4              0.000080     let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
    4              0.000024   endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
    4              0.000126   if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
    4              0.000026   else
    4              0.000140     let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
    4              0.000033   endif
    4              0.000031   try
    4              0.005099     let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
    4              0.000040   endtry
                            
    4              0.000056   if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
    4              0.000022   endif
                            
                              " If a match is found setup match highlighting.
    4              0.000076   if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
    4              0.000106     if exists('*matchaddpos')
    4              0.002182       call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
    4              0.000030     endif
    4              0.000088     let w:paren_hl_on = 1
    4              0.000029   endif

FUNCTION  <SNR>51_mergelists()
    Defined: ~/.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim line 31
Called 1 time
Total time:   0.005387
 Self time:   0.004280

count  total (s)   self (s)
    1   0.001165   0.000165 	let diskmrufs = ctrlp#utils#readfile(ctrlp#mrufiles#cachefile())
    1              0.003591 	cal filter(diskmrufs, 'index(s:mrufs, v:val) < 0')
    1              0.000377 	let mrufs = s:mrufs + diskmrufs
    1   0.000232   0.000125 	retu s:chop(mrufs)

FUNCTION  <SNR>51_savetofile()
    Defined: ~/.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim line 88
Called 1 time
Total time:   0.002057
 Self time:   0.000127

count  total (s)   self (s)
    1   0.002048   0.000118 	cal ctrlp#utils#writecache(a:mrufs, s:cadir, s:cafile)

FUNCTION  coc#util#do_autocmd()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim line 968
Called 1 time
Total time:   0.000091
 Self time:   0.000091

count  total (s)   self (s)
    1              0.000057   if exists('#User#'.a:name)
                                exe 'doautocmd User '.a:name
    1              0.000007   endif

FUNCTION  <SNR>55_notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/client.vim line 167
Called 236 times
Total time:   0.151887
 Self time:   0.136716

count  total (s)   self (s)
  236   0.035334   0.020162   let channel = coc#client#get_channel(self)
  236              0.004268   if empty(channel)
                                return ''
  236              0.001368   endif
  236              0.001721   try
  236              0.002227     if s:is_vim
                                  call ch_sendraw(channel, json_encode([0, [a:method, a:args]])."\n")
  236              0.001905     else
  236              0.037880       call call('rpcnotify', [channel, a:method] + a:args)
  236              0.003406     endif
                              catch /.*/
                                if v:exception =~# 'E475'
                                  if get(g:, 'coc_vim_leaving', 0)
                                    return
                                  endif
                                  echohl Error | echom '['.self.name.'] server connection lost' | echohl None
                                  let name = self.name
                                  call s:on_exit(name, 0)
                                  execute 'silent do User ConnectionLost'.toupper(name[0]).name[1:]
                                elseif v:exception =~# 'E12'
                                  " neovim's bug, ignore it
                                else
                                  echohl Error | echo 'Error on notify ('.a:method.'): '.v:exception | echohl None
                                endif
  236              0.002039   endtry

FUNCTION  <SNR>51_record()
    Defined: ~/.vim/plugged/ctrlp.vim/autoload/ctrlp/mrufiles.vim line 59
Called 1 time
Total time:   0.005127
 Self time:   0.000282

count  total (s)   self (s)
    1              0.000031 	if s:locked | retu | en
    1              0.000026 	let bufnr = a:bufnr + 0
    1              0.000022 	let bufname = bufname(bufnr)
    1              0.000023 	if bufnr > 0 && !empty(bufname)
    1              0.000040 		cal filter(s:mrbs, 'v:val != bufnr')
    1              0.000021 		cal insert(s:mrbs, bufnr)
    1   0.004935   0.000090 		cal s:addtomrufs(bufname)
    1              0.000007 	en

FUNCTION  coc#util#set_buf_var()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/util.vim line 1111
Called 1 time
Total time:   0.000141
 Self time:   0.000141

count  total (s)   self (s)
    1              0.000080   if !bufloaded(a:bufnr) | return | endif
    1              0.000042   call setbufvar(a:bufnr, a:name, a:val)

FUNCTION  coc#rpc#notify()
    Defined: ~/.vim/plugged/coc.nvim/autoload/coc/rpc.vim line 95
Called 236 times
Total time:   0.217138
 Self time:   0.046237

count  total (s)   self (s)
  236   0.033733   0.014720   if !coc#rpc#ready()
                                return ''
  236              0.001356   endif
  236   0.174413   0.022525   call s:client['notify'](a:method, a:args)
  236              0.002426   return ''

FUNCTION  <SNR>52_Autocmd()
    Defined: ~/.vim/plugged/coc.nvim/plugin/coc.vim line 204
Called 236 times
Total time:   0.255483
 Self time:   0.038345

count  total (s)   self (s)
  236              0.010820   if !get(g:,'coc_workspace_initialized', 0)
                                return
  236              0.001936   endif
  236   0.236504   0.019366   call coc#rpc#notify('CocAutocmd', a:000)

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
  236   0.255483   0.038345  <SNR>52_Autocmd()
  236   0.217138   0.046237  coc#rpc#notify()
  235   0.199102             <SNR>71_Highlight_Matching_Pair()
  236   0.151887   0.136716  <SNR>55_notify()
    3   0.095589   0.000736  <SNR>52_SyncAutocmd()
    3   0.094853   0.000679  coc#rpc#request()
    3   0.093924   0.093496  <SNR>55_request()
  239   0.019263             coc#rpc#ready()
  239   0.015368             coc#client#get_channel()
   85   0.009749             coc#util#cursor()
    1   0.005387   0.004280  <SNR>51_mergelists()
    1   0.005127   0.000282  <SNR>51_record()
    1   0.004845             <SNR>51_addtomrufs()
    1   0.002057   0.000127  <SNR>51_savetofile()
    1   0.001930   0.001794  ctrlp#utils#writecache()
    1   0.000884             ctrlp#utils#readfile()
    1   0.000208   0.000141  ale#events#QuitEvent()
    1   0.000141             coc#util#set_buf_var()
    1   0.000136             ctrlp#utils#mkdir()
    1   0.000117             ctrlp#mrufiles#cachefile()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  235              0.199102  <SNR>71_Highlight_Matching_Pair()
  236   0.151887   0.136716  <SNR>55_notify()
    3   0.093924   0.093496  <SNR>55_request()
  236   0.217138   0.046237  coc#rpc#notify()
  236   0.255483   0.038345  <SNR>52_Autocmd()
  239              0.019263  coc#rpc#ready()
  239              0.015368  coc#client#get_channel()
   85              0.009749  coc#util#cursor()
    1              0.004845  <SNR>51_addtomrufs()
    1   0.005387   0.004280  <SNR>51_mergelists()
    1   0.001930   0.001794  ctrlp#utils#writecache()
    1              0.000884  ctrlp#utils#readfile()
    3   0.095589   0.000736  <SNR>52_SyncAutocmd()
    3   0.094853   0.000679  coc#rpc#request()
    1   0.005127   0.000282  <SNR>51_record()
    1   0.000208   0.000141  ale#events#QuitEvent()
    1              0.000141  coc#util#set_buf_var()
    1              0.000136  ctrlp#utils#mkdir()
    1   0.002057   0.000127  <SNR>51_savetofile()
    1              0.000117  ctrlp#mrufiles#cachefile()

